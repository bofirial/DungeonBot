using System.Text;

namespace DungeonBotGame.SourceGenerators;

public static class SourceGenerationHelper
{
    public static string GenerateDungeonBotPartialClass(DungeonBotPartialClassToGenerate dungeonBotPartialClassToGenerate)
    {
        var sb = new StringBuilder();
        sb.Append(@"// <auto-generated/>

#nullable enable
using System.ComponentModel;
using System.Collections.Immutable;
using DungeonBotGame.Combat;
using DungeonBotGame.Foundation;
");
        if (!string.IsNullOrWhiteSpace(dungeonBotPartialClassToGenerate.Namespace))
        {
            sb.Append(@$"
namespace {dungeonBotPartialClassToGenerate.Namespace};
");
        }

        sb.Append(@"
public partial class ").Append(dungeonBotPartialClassToGenerate.Name).Append(@"
{
    private short CurrentHealth { get; }
    private short MaximumHealth { get; }
    private short Level { get; }
    private short Power { get; }
    private short Armor { get; }
    private short Speed { get; }
    private IImmutableList<CombatEffect> CombatEffects { get; }
    private IImmutableDictionary<AbilityType, AbilityContext> Abilities { get; }

    public ").Append(dungeonBotPartialClassToGenerate.Name).Append(@"(
        short currentHealth,
        short maximumHealth,
        short level,
        short power,
        short armor,
        short speed,
        IImmutableList<CombatEffect> combatEffects,
        IImmutableDictionary<AbilityType, AbilityContext> abilities)
    {
        CurrentHealth = currentHealth;
        MaximumHealth = maximumHealth;
        Level = level;
        Power = power;
        Armor = armor;
        Speed = speed;
        CombatEffects = combatEffects;
        Abilities = abilities;

        OnInit();
    }

    partial void OnInit();

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool AbilityIsAvailable(AbilityType abilityType) => Abilities.ContainsKey(abilityType) && Abilities[abilityType].IsAvailable;
    [EditorBrowsable(EditorBrowsableState.Never)]
    public IAbilityAction UseAbility(AbilityType abilityType) => new AbilityAction(abilityType);
    [EditorBrowsable(EditorBrowsableState.Never)]
    public ITargettedAbilityAction UseTargettedAbility(ITarget target, AbilityType abilityType) => new TargettedAbilityAction(target, abilityType);

    public ITargettedAction Attack(ITarget attackTarget) => new AttackAction(attackTarget);

    // ").Append(string.Join(", ", dungeonBotPartialClassToGenerate.DungeonBotNames)).Append(@"
    public bool HeavySwingIsAvailable() => AbilityIsAvailable(AbilityType.HeavySwing);
    public ITargettedAbilityAction UseHeavySwing(ITarget target) => UseTargettedAbility(target, AbilityType.HeavySwing);
}");

        return sb.ToString();
    }
}

//[Generator]
//public class DungeonBotPartialClassGenerator : ISourceGenerator
//{
//    private const string DungeonBotAttributeMetadataName = "DungeonBotGame.Foundation.DungeonBotAttribute";

//    private readonly List<string> _generatedDungeonBotPartialClasses = new List<string>();

//    public void Execute(GeneratorExecutionContext context)
//    {
//        var targetAttributeType = context.Compilation.References
//            .Select(context.Compilation.GetAssemblyOrModuleSymbol)
//            .OfType<IAssemblySymbol>()
//            .Select(assemblySymbol => assemblySymbol.GetTypeByMetadataName(DungeonBotAttributeMetadataName))
//            .FirstOrDefault(t => t != null);

//        if (context.SyntaxReceiver is GenerateDungeonBotPartialClassSyntaxReceiver generateDungeonBotPartialClassSyntaxReceiver)
//        {
//            foreach (var (classDeclarationSyntax, attributeSyntax) in generateDungeonBotPartialClassSyntaxReceiver.ClassesToAugment)
//            {
//                var semanticModel = context.Compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);

//                if (SymbolEqualityComparer.Default.Equals(semanticModel.GetTypeInfo(attributeSyntax).Type, targetAttributeType))
//                {
//                    var classModel = semanticModel.GetDeclaredSymbol(classDeclarationSyntax);

//                    if (classModel != null)
//                    {
//                        var dungeonBotNames = GetDungeonBotNamesFromAttributes(classModel, targetAttributeType);

//                        var className = classDeclarationSyntax.Identifier.ValueText;

//                        if (_generatedDungeonBotPartialClasses.Contains(className))
//                        {
//                            continue;
//                        }

//                        var sourceText = SourceText.From($@"// Auto-generated code

//using System.ComponentModel;
//using System.Collections.Immutable;
//using DungeonBotGame.Combat;

//namespace {classModel.ContainingNamespace.ToDisplayString()};

//public partial class {className}
//{{
//    private short CurrentHealth {{ get; }}
//    private short MaximumHealth {{ get; }}
//    private short Level {{ get; }}
//    private short Power {{ get; }}
//    private short Armor {{ get; }}
//    private short Speed {{ get; }}
//    private IImmutableList<CombatEffect> CombatEffects {{ get; }}
//    private IImmutableDictionary<AbilityType, AbilityContext> Abilities {{ get; }}

//    public {className}(
//        short currentHealth,
//        short maximumHealth,
//        short level,
//        short power,
//        short armor,
//        short speed,
//        IImmutableList<CombatEffect> combatEffects,
//        IImmutableDictionary<AbilityType, AbilityContext> abilities)
//    {{
//        CurrentHealth = currentHealth;
//        MaximumHealth = maximumHealth;
//        Level = level;
//        Power = power;
//        Armor = armor;
//        Speed = speed;
//        CombatEffects = combatEffects;
//        Abilities = abilities;

//        OnInit();
//    }}

//    partial void OnInit();

//    [EditorBrowsable(EditorBrowsableState.Never)]
//    public bool AbilityIsAvailable(AbilityType abilityType) => Abilities.ContainsKey(abilityType) && Abilities[abilityType].IsAvailable;
//    [EditorBrowsable(EditorBrowsableState.Never)]
//    public IAbilityAction UseAbility(AbilityType abilityType) => new AbilityAction(abilityType);
//    [EditorBrowsable(EditorBrowsableState.Never)]
//    public ITargettedAbilityAction UseTargettedAbility(ITarget target, AbilityType abilityType) => new TargettedAbilityAction(target, abilityType);

//    public ITargettedAction Attack(ITarget attackTarget) => new AttackAction(attackTarget);

//    // dungeonBotNames: {string.Join(", ", dungeonBotNames)}
//    public bool HeavySwingIsAvailable() => AbilityIsAvailable(AbilityType.HeavySwing);
//    public ITargettedAbilityAction UseHeavySwing(ITarget target) => UseTargettedAbility(target, AbilityType.HeavySwing);
//}}", Encoding.UTF8);

//                        _generatedDungeonBotPartialClasses.Add(className);
//                        context.AddSource($"{className}.Generated.cs", sourceText);
//                    }
//                }
//            }
//        }
//    }

//    private IEnumerable<string> GetDungeonBotNamesFromAttributes(ISymbol classModel, INamedTypeSymbol targetAttributeType)
//    {
//        foreach (var attribute in classModel.GetAttributes())
//        {
//            if (!SymbolEqualityComparer.Default.Equals(attribute.AttributeClass, targetAttributeType))
//            {
//                continue;
//            }

//            if (attribute.ConstructorArguments.Length == 1)
//            {
//                var constructorArgument = attribute.ConstructorArguments.First().Value;

//                if (constructorArgument == null)
//                {
//                    continue;
//                }

//                yield return constructorArgument.ToString();
//            }

//            if (attribute.NamedArguments.Length == 1 && attribute.NamedArguments.First().Key == "Name")
//            {
//                var constructorArgument = attribute.NamedArguments.First().Value;

//                yield return constructorArgument.ToString();
//            }
//        }
//    }

//    public void Initialize(GeneratorInitializationContext context) => context.RegisterForSyntaxNotifications(() => new GenerateDungeonBotPartialClassSyntaxReceiver());
//}
