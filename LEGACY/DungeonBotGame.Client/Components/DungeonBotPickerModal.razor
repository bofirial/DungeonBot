@using DungeonBotGame.Models.ViewModels
@using DungeonBotGame.Client.BusinessLogic

@inject IClassDetailProvider ClassDetailProvider

<Modal ModalId="dungeonBotPicker" ModalTitle="Select a DungeonBot" ModalDialogSize="modal-xl" @ref="Modal">
    <div class="row justify-content-evenly row-cols-1 row-cols-lg-2 row-cols-xl-3 g-4 mb-3 profile-cards">
        @foreach (var dungeonBot in DungeonBots)
        {
            var borderClass = string.Empty;
            var buttonClass = string.Empty;

            if (dungeonBot == SelectedDungeonBot)
            {
                borderClass = "border-primary";
            }

            if (UnavailableDungeonBots.Contains(dungeonBot))
            {
                buttonClass = "disabled";
                borderClass = "text-secondary bg-light";
            }

            <div class="col">
                <div class="card h-100 @borderClass">
                    <div class="card-header @borderClass">
                        @dungeonBot.Name
                    </div>
                    <div class="card-body">
                        <h4 class="card-title text-center">Level @dungeonBot.Level</h4>
                        <p class="card-title text-center">@ClassDetailProvider.GetClassName(dungeonBot.DungeonBotClass)</p>
                        <img src="@dungeonBot.ProfileImageLocation" class="pixel-image profile-image rounded mx-auto d-block w-100" alt="@dungeonBot.Name">
                    </div>
                    <div class="card-footer @borderClass">
                        <button type="button" class="btn btn-primary btn-large px-5 mx-auto mt-3 d-block @buttonClass"
                                @onclick="async () => await SelectAsync(dungeonBot)">
                            Select
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</Modal>

@code {
    [Parameter]
    public IEnumerable<DungeonBotViewModel> DungeonBots { get; set; } = Array.Empty<DungeonBotViewModel>();

    public Action<DungeonBotViewModel> DungeonBotSelectionAction { get; set; } = dungeonBot => { };

    public DungeonBotViewModel? SelectedDungeonBot { get; set; }

    public IEnumerable<DungeonBotViewModel> UnavailableDungeonBots { get; set; } = Array.Empty<DungeonBotViewModel>();

    public Modal? Modal { get; set; }

    public async Task SelectAsync(DungeonBotViewModel dungeonBot)
    {
        DungeonBotSelectionAction(dungeonBot);

        if (Modal != null)
        {
            await Modal.CloseAsync();
        }
    }

    public async Task ShowAsync()
    {
        if (Modal != null)
        {
            await Modal.ShowAsync();
        }
    }
}
