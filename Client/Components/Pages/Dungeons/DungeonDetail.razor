@using DungeonBot.Models.Display;
@using DungeonBot.Models.Combat;
@using System.Reflection;
@using Fluxor;
@using Store.ActionModule;

@inject IState<ActionModuleState> ActionModuleState
@inject IJSRuntime JSRuntime

@if (Dungeon != null)
{
    <h2>@Dungeon.Name</h2>
    <p>@Dungeon.Description</p>

    <div class="encounters row justify-content-center m-2">
        <div class="card col-12 col-md-6 col-lg-3">
            <img src="@Dungeon.Encounters.First().ProfileImageLocation" class="card-img-top" alt="@Dungeon.Encounters.First().Name">
            <div class="card-body">
                <h3 class="card-title">@Dungeon.Encounters.First().Name</h3>
                <p class="card-text">@Dungeon.Encounters.First().Description</p>
            </div>
        </div>
    </div>

    <button class="btn btn-primary btn-large float-right px-4 mx-2" @onclick="e => StartDungeonAsync(Dungeon)">Start Dungeon</button>

    <div class="modal fade" id="dungeonResultModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle">@(DungeonResultIsSuccess ? "Success!" : "Defeat")</h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>@(DungeonResultIsSuccess ? "Congratulations!  You have defeated" : "I'm sorry! You were defeated by") the @EnemyName.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public Dungeon? Dungeon { get; set; } = null;

    private bool DungeonResultIsSuccess { get; set; }

    private string EnemyName { get; set; } = string.Empty;

    public async Task StartDungeonAsync(Dungeon currentDungeon)
    {
        //var assemblyModuleLibrary = ActionModuleState.Value.ActionModuleLibraries.First();

        //var assembly = Assembly.Load(assemblyModuleLibrary.Assembly.ToArray());

        //var methods = assembly.GetTypes().SelectMany(t => t.GetMethods()).Where(m => m.GetCustomAttributes(typeof(ActionModuleEntrypointAttribute), false).Length > 0);

        ////TODO: Error for multiple entry points
        ////TODO: Error for entry point not found
        ////TODO: Error for invalid method parameters
        ////TODO: Error for invalid method return type

        //var actionMethod = methods.First();

        //var type = actionMethod.DeclaringType;

        //var actionModule = Activator.CreateInstance(type);

        //var dungeonBot = new Player(assemblyModuleLibrary.Name, 100);
        //var enemy = new Enemy(currentDungeon.Encounters.First().Name, 80);

        //var actionComponent = new ActionComponent();
        //var sensorComponent = new SensorComponent(enemy);

        //while (dungeonBot.CurrentHealth > 0 && enemy.CurrentHealth > 0)
        //{
        //    dungeonBot.CurrentHealth -= 10;

        //    var parameters = new object?[] { actionComponent, sensorComponent };

        //    var result = (IAction)actionMethod.Invoke(actionModule, parameters);

        //    if (result.ActionType == ActionType.Attack)
        //    {
        //        enemy.CurrentHealth -= 10;
        //    }
        //}

        //EnemyName = enemy.Name;
        //DungeonResultIsSuccess = enemy.CurrentHealth <= 0;

        //await JSRuntime.InvokeVoidAsync("launchModal", "dungeonResultModal");
    }
}