@using BlazorMonaco
@using BlazorMonaco.Bridge
@using Microsoft.AspNetCore.Components
@using DungeonBot.Client.BusinessLogic
@using System.IO
@using Microsoft.Extensions.Logging

<div class="code-editor">
    <MonacoEditor @ref="CSharpEditor" Id="monaco-container" ConstructionOptions="EditorConstructionOptions"></MonacoEditor>

    <div class="mt-3">
        <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="SaveAsync">Save</button>
    </div>
</div>

@code {
    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<System.IO.MemoryStream> OnSaveAsync { get; set; }

    [Parameter]
    public EventCallback OnCancelAsync { get; set; }

    @inject ICSharpCompiler CSharpCompiler

    @inject ILogger<DungeonBotCodeEditor> Logger

    private MonacoEditor? CSharpEditor { get; set; }

    public void SetValue(string value)
    {
        Value = value;

        if (CSharpEditor != null)
        {
            CSharpEditor.SetValue(value);
        }
    }

    private async Task SaveAsync(MouseEventArgs e)
    {
        if (CSharpEditor == null)
        {
            return;
        }

        var code = await CSharpEditor.GetValue();

        var cSharpCompilation = await CSharpCompiler.CompileAsync(code);

        var errorDiagnostics = cSharpCompilation.GetDiagnostics().Where(x => x.Severity == Microsoft.CodeAnalysis.DiagnosticSeverity.Error);
        if (errorDiagnostics.Any())
        {
            foreach (var diagnostic in errorDiagnostics)
            {
                HandleErrorDiagnostic(diagnostic);
            }
        }

        using (var compiledLibraryStream = new MemoryStream())
        {
            var emitResult = cSharpCompilation.Emit(compiledLibraryStream);
            if (emitResult.Success)
            {
                await OnSaveAsync.InvokeAsync(compiledLibraryStream);
            }
        }
    }

    private async Task CancelAsync(MouseEventArgs e)
    {
        await OnCancelAsync.InvokeAsync(null);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Theme = "vs-dark",
            Value = Value
        };
    }

    private void HandleErrorDiagnostic(Microsoft.CodeAnalysis.Diagnostic diagnostic)
    {
        Logger.LogInformation(diagnostic.ToString());
    }
}