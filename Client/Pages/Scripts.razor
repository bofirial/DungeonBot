@page "/scripts"

@using System.IO;
@using System.Reflection;
@using System.Threading.Tasks;
@using Microsoft.CodeAnalysis.CSharp.Scripting.Hosting;

<h1>Scripts</h1>

<DungeonBotCodeEditor @ref="DungeonBotCodeEditor" Value="@_initialInput" OnSaveAsync="RunAsync" OnCancelAsync="CancelAsync"></DungeonBotCodeEditor>

@code
{
    private const string _initialInput = @"using System.Threading.Tasks;
//DO NOT MODIFY THE NAMESPACE, CLASS, OR METHOD
namespace DungeonBot.Generated
{
    //DO NOT MODIFY THE NAMESPACE, CLASS, OR METHOD
    public class DungeonBot
    {
        //DO NOT MODIFY THE NAMESPACE, CLASS, OR METHOD
        public async Task<int> ActionAsync() {
            //Edit the code here!
            System.Console.WriteLine(""Hello World!"");

            return 200;
        }
    }
}";

    public DungeonBotCodeEditor? DungeonBotCodeEditor { get; set; }

    private async Task RunAsync(MemoryStream memoryStream)
    {
        var assembly = Assembly.Load(memoryStream.ToArray());

        if (assembly == null)
        {
            throw new Exception("Null Assembly");
        }

        var type = assembly.GetType("DungeonBot.Generated.DungeonBot");
        var actionMethod = type.GetMethod("ActionAsync");

        var dungeonBot = Activator.CreateInstance(type);

        var result = await ((Task<int>)actionMethod.Invoke(dungeonBot, new object[0]));

        Console.WriteLine(CSharpObjectFormatter.Instance.FormatObject(result));
    }

    private Task CancelAsync()
    {
        if (DungeonBotCodeEditor != null)
        {
            DungeonBotCodeEditor.SetValue(_initialInput);
        }

        return Task.CompletedTask;
    }
}