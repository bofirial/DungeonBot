@using BlazorMonaco
@using BlazorMonaco.Bridge
@using DungeonBotGame.Client.BusinessLogic.Compilation
@using Microsoft.AspNetCore.Components
@using DungeonBotGame.Models.ViewModels

<MonacoEditor @ref="CSharpEditor" CssClass="@CssClass" Id="@Id" ConstructionOptions="EditorConstructionOptions"></MonacoEditor>

@code {
    public string Id { get; set; } = $"monaco-container-{Guid.NewGuid()}";

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public DungeonBotViewModel? DungeonBot { get; set; }

    @inject ICodeCompletionService CodeCompletionService

    private MonacoEditor? CSharpEditor { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (DungeonBot != null)
        {
            await CodeCompletionService.InitializeCodeEditorAsync(DungeonBot);
        }

        await base.OnInitializedAsync();
    }

    public async Task<string> GetValueAsync()
    {

        if (CSharpEditor == null)
        {
            return string.Empty;
        }

        return await CSharpEditor.GetValue();
    }

    public async Task SetValueAsync(string value)
    {
        Value = value;

        if (CSharpEditor != null)
        {
            await CSharpEditor.SetValue(value);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Theme = "vs-dark",
            Value = Value,
            ReadOnly = ReadOnly
        };
    }
}