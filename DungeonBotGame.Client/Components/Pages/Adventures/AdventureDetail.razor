@using DungeonBotGame.Models.ViewModels;
@using Fluxor;
@using DungeonBotGame.Client.Store.DungeonBots;
@using DungeonBotGame.Client.Store.Adventures;
@using System.Collections.Immutable
@using DungeonBotGame.Client.BusinessLogic

@inherits Fluxor.Blazor.Web.Components.FluxorComponent;

@inject IState<DungeonBotState> DungeonBotState
@inject IDispatcher Dispatcher

@inject IClassDetailProvider ClassDetailProvider

@if (Adventure != null)
{
    <h2>@Adventure.Name</h2>
    <p>@Adventure.Description</p>


    <div class="row justify-content-evenly row-cols-1 row-cols-lg-2 row-cols-xl-3 g-4 mb-3 profile-cards">

        @foreach (var encounter in Adventure.Encounters)
        {
            <div class="col">
                <div class="card h-100 border-danger">
                    <div class="card-header border-danger">
                        @encounter.Name
                    </div>
                    <div class="card-body">
                        <h4 class="card-title text-center">@($"Level 1")</h4>
                        <p class="card-title text-center">@encounter.Description</p>
                        <img src="@encounter.ProfileImageLocation" class="pixel-image profile-image rounded mx-auto d-block w-100" alt="@encounter.Name">
                    </div>
                </div>
            </div>
        }

        @foreach (var dungeonBotSlot in DungeonBotSlots)
        {
            if (dungeonBotSlot.Slot <= Adventure.DungeonBotSlots)
            {
                var dungeonBotSlotImageLocation = dungeonBotSlot.DungeonBot == null ? "/images/temp/dungeonbot-silhoutte.png" : dungeonBotSlot.DungeonBot.ProfileImageLocation;
                var dungeonBotSlotName = dungeonBotSlot.DungeonBot == null ? "Select a DungeonBot" : dungeonBotSlot.DungeonBot.Name;

                <div class="col">
                    <div class="card h-100">
                        <div class="card-header">
                            @dungeonBotSlotName
                        </div>
                        <div class="card-body">
                            @if (dungeonBotSlot.DungeonBot != null)
                            {
                                <h4 class="card-title text-center">Level @dungeonBotSlot.DungeonBot.Level</h4>
                                <p class="card-title text-center">@ClassDetailProvider.GetClassName(dungeonBotSlot.DungeonBot.DungeonBotClass)</p>
                            }
                            else
                            {
                                <h4 class="card-title text-center">&nbsp;</h4>
                                <p class="card-title text-center">&nbsp;</p>
                            }
                            <img src="@dungeonBotSlotImageLocation" class="pixel-image profile-image rounded mx-auto d-block w-100" alt="@dungeonBotSlotName">
                            <button type="button" class="btn btn-primary btn-large px-5 mx-auto mt-3 d-block"
                                    @onclick="() => SelectADungeonBot(dungeonBotSlot.Slot)">
                                Select a DungeonBot
                            </button>
                        </div>
                    </div>
                </div>
            }
        }

    </div>

    <div class="mt-3 text-center">
        <button type="button" class="btn btn-primary px-5 mx-3 @StartAdventureButtonClass"
                @onclick="async e => await StartAdventureAsync(Adventure)">
            Start Adventure
        </button>
    </div>

    <SpinnerModal @ref="Spinner" ModalTitle="Starting Adventure"></SpinnerModal>

    <AdventureResultModal @ref="AdventureResultModal" AdventureResult="@AdventureResult" OnShow="async () => await (Spinner?.StopSpinnerAsync() ?? Task.CompletedTask)"></AdventureResultModal>
}

@code {

    [Parameter]
    public AdventureViewModel? Adventure { get; set; }

    public string AdventureId { get; set; } = string.Empty;

    public AdventureResultModal? AdventureResultModal { get; set; }

    public AdventureResultViewModel? AdventureResult { get; set; }

    public string StartAdventureButtonClass { get; set; } = string.Empty;

    public List<(DungeonBotViewModel? DungeonBot, ushort Slot)> DungeonBotSlots { get; set; } = new List<(DungeonBotViewModel? DungeonBot, ushort Slot)>() {
        (DungeonBot: null, Slot: 1),
        (DungeonBot: null, Slot: 2),
        (DungeonBot: null, Slot: 3),
        (DungeonBot: null, Slot: 4),
        (DungeonBot: null, Slot: 5) };

    public SpinnerModal? Spinner { get; set; }

    public string CurrentAdventureRunId { get; set; } = string.Empty;

    public async Task StartAdventureAsync(AdventureViewModel currentAdventure)
    {
        CurrentAdventureRunId = Guid.NewGuid().ToString();

        if (Spinner != null)
        {
            await Spinner.StartSpinnerAsync();

            var dungeonBots = (IEnumerable<DungeonBotViewModel>)DungeonBotSlots.Where(d => d.DungeonBot != null).Select(d => d.DungeonBot);

            Dispatcher.Dispatch(new RunAdventureAction(currentAdventure, dungeonBots.ToImmutableList(), CurrentAdventureRunId));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Adventure != null)
        {
            if (string.IsNullOrEmpty(AdventureId) || AdventureId != Adventure.Id)
            {
                AdventureId = Adventure.Id;

                StartAdventureButtonClass = "disabled";

                DungeonBotSlots = new List<(DungeonBotViewModel? DungeonBot, ushort Slot)>() {
                    (DungeonBot: null, Slot: 1),
                    (DungeonBot: null, Slot: 2),
                    (DungeonBot: null, Slot: 3),
                    (DungeonBot: null, Slot: 4),
                    (DungeonBot: null, Slot: 5) };

                return;
            }


            if (AdventureResultModal != null && Adventure.AdventureResults != null)
            {
                var adventureResult = Adventure.AdventureResults.LastOrDefault(d => d.RunId == CurrentAdventureRunId);

                if (adventureResult != null && Spinner != null)
                {
                    CurrentAdventureRunId = string.Empty;

                    AdventureResult = adventureResult;

                    //await Spinner.StopSpinnerAsync();
                    await AdventureResultModal.ShowModalAsync();
                }
            }
        }
    }

    public void SelectADungeonBot(ushort dungeonBotSlot)
    {
        var i = new Random().Next(DungeonBotState?.Value?.DungeonBots?.Count ?? 0);

        DungeonBotSlots[dungeonBotSlot - 1] = (DungeonBot: DungeonBotState?.Value?.DungeonBots?[i], Slot: dungeonBotSlot);

        if (Adventure != null && DungeonBotSlots.Count(d => d.DungeonBot != null) >= Adventure.DungeonBotSlots)
        {
            StartAdventureButtonClass = string.Empty;
        }
    }
}
