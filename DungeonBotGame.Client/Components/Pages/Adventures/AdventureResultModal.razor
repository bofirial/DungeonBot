@using DungeonBotGame.Models.ViewModels
@using DungeonBotGame.Models.Combat;

@inject IJSRuntime JSRuntime

<Modal ModalId="adventureResultModal" ModalTitle="@(AdventureResult?.Success == true ? "Victory" : "Defeat")" @ref="Modal" OnShow="@OnShow" ModalDialogSize="modal-xl">
    @if (AdventureResult != null)
    {
        <h4 class="m-2">Encounters</h4>

        <Accordion Id="encountersAccordion" TListItem="EncounterResultViewModel" List="AdventureResult.EncounterResults"
                   HeadingIdFunction="@((e) => $"encounterAccordionHeading-{e.Order}")"
                   CollapseSectionIdFunction="@((e) => $"encounterAccordionCollapseSection-{e.Order}")"
                   IsCollapsedInitiallyFunction="@((e) => e.Order != 1)">
            <HeadingView Context="encounterResult">@encounterResult.Name</HeadingView>
            <CollapseSectionView Context="encounterResult">

                <CollapsePanel CssClass="my-2" HeadingId="@($"combatLogPanelHeading-{encounterResult.Order}")" CollapseSectionId="@($"combatLogPanel-{encounterResult.Order}")" IsCollapsedInitially="false">
                    <HeadingView>Combat Log</HeadingView>
                    <CollapseSectionView>
                        <Accordion Id="@($"combatLogAccordionId-{encounterResult.Order}")" TListItem="CombatLogEntry" List="encounterResult.CombatLog">
                            <HeadingView Context="combatLogEntry"><span class="badge bg-primary rounded-pill">@($"{(combatLogEntry.CombatTime / 100.0).ToString("0.00").PadLeft(5)}s")</span> @combatLogEntry.DisplayText</HeadingView>
                            <CollapseSectionView Context="combatLogEntry">
                                @foreach (var character in combatLogEntry.Characters)
                                {
                                    <div class="alert @(character.IsDungeonBot ? "alert-success" : "alert-danger")" role="alert">
                                        <span class="characterName">@character.Name</span>
                                        <span class="badge bg-info rounded-pill">@character.CurrentHealth / @character.MaximumHealth hp</span>
                                        <div class="float-right">
                                            @foreach (var combatEffect in character.CombatEffects)
                                            {
                                                <span class="badge bg-info rounded-pill m-1" data-toggle="tooltip" title="@combatEffect.Name">@combatEffect.ShortName</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </CollapseSectionView>
                        </Accordion>

                        <div class="alert @(encounterResult.Success ? "alert-success" : "alert-danger") m-3" role="alert">
                            @encounterResult.ResultDisplayText
                        </div>
                    </CollapseSectionView>
                </CollapsePanel>

                <CollapsePanel CssClass="my-2" HeadingId="@($"actionModulePanelHeading-{encounterResult.Order}")" CollapseSectionId="@($"actionModulePanel-{encounterResult.Order}")" IsCollapsedInitially="true">
                    <HeadingView>Action Modules</HeadingView>
                    <CollapseSectionView>
                        @foreach (var character in encounterResult.Characters)
                        {
                            var characterId = string.Join('-', encounterResult.Order, character.Id);
                            var collapsePanelId = $"characterPanel-{characterId}";
                            CodeEditorCollapsePanelIdsToInitiate.Add(collapsePanelId);

                            // Sets a CSS Class on the Code Editor when the Panel is Showing to redraw the Code Editor
                            Action setCodeEditorCssClass = () =>
                            {
                                if (!CharacterPanelHasExpanded.ContainsKey(characterId))
                                {
                                    CharacterPanelHasExpanded.Add(characterId, "has-expanded");
                                }
                            };

                            <CollapsePanel CssClass="my-2" HeadingId="@($"characterPanelHeading-{characterId}")" CollapseSectionId="@collapsePanelId" IsCollapsedInitially="true" OnShow="@setCodeEditorCssClass">
                                <HeadingView>@character.Name</HeadingView>
                                <CollapseSectionView>
                                    <DungeonBotCodeEditor CssClass="@(CharacterPanelHasExpanded.ContainsKey(characterId) ? CharacterPanelHasExpanded[characterId] : string.Empty)" Files="@character.SourceCodeFiles" ReadOnly></DungeonBotCodeEditor>
                                </CollapseSectionView>
                            </CollapsePanel>
                        }
                    </CollapseSectionView>
                </CollapsePanel>
            </CollapseSectionView>
        </Accordion>
    }
</Modal>

@code {
    [Parameter]
    public AdventureResultViewModel? AdventureResult { get; set; }

    [Parameter]
    public EventCallback OnShow { get; set; }

    public Dictionary<string, string> CharacterPanelHasExpanded { get; set; } = new Dictionary<string, string>();

    public HashSet<string> CodeEditorCollapsePanelIdsToInitiate = new HashSet<string>();

    public Modal? Modal { get; set; }

    public async Task ShowModalAsync()
    {
        CharacterPanelHasExpanded = new Dictionary<string, string>();

        if (Modal != null)
        {
            await Modal.ShowAsync();
        }

        await JSRuntime.InvokeVoidAsync("closePanels", CodeEditorCollapsePanelIdsToInitiate);

        CodeEditorCollapsePanelIdsToInitiate.Clear();
    }
}
