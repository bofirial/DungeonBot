@using DungeonBotGame.Models.ViewModels
@using DungeonBotGame.Models.Combat;

@inject IJSRuntime JSRuntime

<div class="modal fade" id="adventureResultModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">@(AdventureResult?.Success == true ? "Victory" : "Defeat")</h3>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                @if (AdventureResult != null)
                {
                    <h4 class="m-2">Encounters</h4>

                    <Accordion Id="encountersAccordion" TListItem="EncounterResultViewModel" List="AdventureResult.EncounterResults"
                               HeadingIdFunction="@((e) => $"encounterAccordionHeading-{e.Order}")"
                               CollapseSectionIdFunction="@((e) => $"encounterAccordionCollapseSection-{e.Order}")"
                               IsCollapsedInitiallyFunction="@((e) => e.Order != 1)">
                        <HeadingView Context="encounterResult">@encounterResult.Name</HeadingView>
                        <CollapseSectionView Context="encounterResult">

                            <CollapsePanel CssClass="my-2" HeadingId="@($"combatLogPanelHeading-{encounterResult.Order}")" CollapseSectionId="@($"combatLogPanel-{encounterResult.Order}")" IsCollapsedInitially="false">
                                <HeadingView>Combat Log</HeadingView>
                                <CollapseSectionView>
                                    <Accordion Id="@($"combatLogAccordionId-{encounterResult.Order}")" TListItem="EncounterRoundResult" List="encounterResult.EncounterRoundResults">
                                        <HeadingView Context="encounterRoundResult">Round <span class="badge bg-primary rounded-pill">@encounterRoundResult.Round</span> - DungeonBotGame Health <span class="badge bg-success rounded-pill">@encounterRoundResult.DungeonBotCurrentHealth</span> - @EnemyName Health <span class="badge bg-danger rounded-pill">@encounterRoundResult.EnemyCurrentHealth</span></HeadingView>
                                        <CollapseSectionView Context="encounterRoundResult">
                                            <ul class="list-group list-group-flush">

                                                @foreach (var actionResult in encounterRoundResult.ActionResults)
                                                {
                                                    <li class="list-group-item">@actionResult.DisplayText</li>
                                                }
                                            </ul>
                                        </CollapseSectionView>
                                    </Accordion>

                                    <div class="alert @(encounterResult.Success ? "alert-success" : "alert-danger") m-3" role="alert">
                                        @encounterResult.ResultDisplayText
                                    </div>
                                </CollapseSectionView>
                            </CollapsePanel>

                            <CollapsePanel CssClass="my-2" HeadingId="@($"actionModulePanelHeading-{encounterResult.Order}")" CollapseSectionId="@($"actionModulePanel-{encounterResult.Order}")" IsCollapsedInitially="true">
                                <HeadingView>Action Modules</HeadingView>
                                <CollapseSectionView>
                                    @foreach (var character in encounterResult.Characters)
                                    {
                                        // Sets a CSS Class on the Code Editor when the Panel is Showing to redraw the Code Editor
                                        Action setCodeEditorCssClass = () =>
                                        {
                                            if (!CharacterPanelHasExpanded.ContainsKey(character.Id))
                                            {
                                                CharacterPanelHasExpanded.Add(character.Id, "has-expanded");
                                            }
                                        };

                                        <CollapsePanel CssClass="my-2" HeadingId="@($"characterPanelHeading-{character.Id}")" CollapseSectionId="@($"characterPanel-{character.Id}")" IsCollapsedInitially="true" OnShow="@setCodeEditorCssClass">
                                            <HeadingView>@character.Name</HeadingView>
                                            <CollapseSectionView>
                                                <DungeonBotCodeEditor CssClass="@(CharacterPanelHasExpanded.ContainsKey(character.Id) ? CharacterPanelHasExpanded[character.Id] : string.Empty)" Files="@character.SourceCodeFiles" ReadOnly="true"></DungeonBotCodeEditor>
                                            </CollapseSectionView>
                                        </CollapsePanel>
                                    }
                                </CollapseSectionView>
                            </CollapsePanel>
                        </CollapseSectionView>
                    </Accordion>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public AdventureResultViewModel? AdventureResult { get; set; }

    [Parameter]
    public string EnemyName { get; set; } = string.Empty;

    public Dictionary<string, string> CharacterPanelHasExpanded { get; set; } = new Dictionary<string, string>();

    public async Task ShowModalAsync()
    {
        await JSRuntime.InvokeVoidAsync("launchModal", "adventureResultModal");
    }
}