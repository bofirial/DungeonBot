@using DungeonBotGame.Models.ViewModels;
@using Fluxor;
@using Store.DungeonBots;
@using DungeonBotGame.Client.Store.Dungeons

@inherits Fluxor.Blazor.Web.Components.FluxorComponent;

@inject IState<DungeonBotState> ActionModuleState
@inject IState<DungeonState> DungeonState
@inject IDispatcher Dispatcher

@if (Dungeon != null)
{
    <h2>@Dungeon.Name</h2>
    <p>@Dungeon.Description</p>

    <div class="encounters row justify-content-center m-2">
        <div class="card col-12 col-md-6 col-lg-3">
            <img src="@Dungeon.Encounters.First().ProfileImageLocation" class="card-img-top" alt="@Dungeon.Encounters.First().Name">
            <div class="card-body">
                <h3 class="card-title">@Dungeon.Encounters.First().Name</h3>
                <p class="card-text">@Dungeon.Encounters.First().Description</p>
            </div>
        </div>
    </div>

    <button class="btn btn-primary btn-large px-4 mx-2 @(DungeonButtonDisabled ? "disabled" : string.Empty)"
            @onclick="e => StartDungeon(Dungeon)">
        Start Dungeon
    </button>

    @if (DungeonButtonDisabled)
    {
        <p class="text-danger mx-2 p-1">You must save an Action Module Library before you can start the dungeon.</p>
    }

    <DungeonResultModal @ref="DungeonResultModal" DungeonResult="@DungeonResult" EnemyName="@Dungeon.Encounters.First().Name"></DungeonResultModal>
}

@code {

    [Parameter]
    public DungeonViewModel? Dungeon { get; set; }

    public DungeonResultModal? DungeonResultModal { get; set; }

    public DungeonResultViewModel? DungeonResult { get; set; }

    public string CurrentDungeonRunId { get; set; } = string.Empty;

    public bool DungeonButtonDisabled => ActionModuleState.Value == null ||
        !ActionModuleState.Value.ActionModuleLibraries.Any() ||
        ActionModuleState.Value.ActionModuleLibraries.First().Assembly.Count == 0;

    public void StartDungeon(DungeonViewModel currentDungeon)
    {
        CurrentDungeonRunId = Guid.NewGuid().ToString();

        Dispatcher.Dispatch(new RunDungeonAction(currentDungeon, ActionModuleState.Value.ActionModuleLibraries.First(), CurrentDungeonRunId));
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Dungeon == null || DungeonResultModal == null || Dungeon.DungeonResults == null)
        {
            return;
        }

        var dungeonResult = Dungeon.DungeonResults.LastOrDefault(d => d.RunId == CurrentDungeonRunId);

        if (dungeonResult != null)
        {
            CurrentDungeonRunId = string.Empty;

            DungeonResult = dungeonResult;

            await DungeonResultModal.ShowModalAsync();
        }
    }
}